"""
Django settings for snomedct_terminology_server project.

Generated by 'django-admin startproject' using Django 1.8.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import dj_database_url

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'j_q#l4lvrd%kp0v%*yr(%4vu8*76g@@sm$ghcw8v6nlwi==qko'


def get_bool_env(env_var, default=False):
    assert default is False or default is True
    val = os.getenv(env_var, None)
    import json
    if val is None:
        return default
    try:
        p = json.loads(val)
        assert p is False or p is True
        return p
    except ValueError:
        raise Exception("Invalid boolean config: {}".format(val))

# ======== start sanity tests for get_bool_env ================


var1, default1 = 'tst-default-false', False
var2, default2 = 'tst-default-true', True

assert get_bool_env(var1, default1) is False
assert get_bool_env(var2, default2) is True

os.environ[var1] = 'false'
os.environ[var2] = 'false'
assert get_bool_env(var1, default1) is False
assert get_bool_env(var2, default2) is False

os.environ[var1] = 'true'
os.environ[var2] = 'true'
assert get_bool_env(var1, default1) is True
assert get_bool_env(var2, default2) is True

os.environ[var1] = 'some crap'
try:
    assert get_bool_env(var1, default1) is False
except Exception as ex:
    assert str(ex) == "Invalid boolean config: some crap"

os.environ[var1] = '"{}"'
try:
    assert get_bool_env(var1, default1) is False
except Exception as ae:
    assert isinstance(ae, AssertionError)
del os.environ[var1], os.environ[var2]
del var1, var2, default1, default2

# ======== end sanity tests for get_bool_env ==================


DEBUG = get_bool_env('DEBUG', True)

ALLOWED_HOSTS = ['.slade360.co.ke', '.slade360emr.com', '.localhost']

CORS_ORIGIN_REGEX_WHITELIST = (
    '^(https?://)?(.+)-?.slade360\.co.ke$',
    '^(https?://)?(\w+\.)?localhost\:\d+$',
    '^(https?://)?(.+)-?.slade360emr.com$',
    # accept connections from emr-frontend* from heroku
    '^https://emr-frontend-?(.+)?.herokuapp.com$',
)

CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-type',
    'accept',
    'origin',
    'authorization',
    'x-csrftoken'
)
# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'debug_toolbar',
    'django.contrib.postgres',
    'django_extensions',
    'corsheaders',
    'raven.contrib.django.raven_compat',
)

LOCAL_APPS = (
    'snomedct_terminology_server.server',
)

INSTALLED_APPS += LOCAL_APPS

MIDDLEWARE_CLASSES = (
    'django.middleware.http.ConditionalGetMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware'
)

SESSION_COOKIE_SECURE = True

SECURE_CONTENT_TYPE_NOSNIFF = True

SECURE_BROWSER_XSS_FILTER = True

CSRF_COOKIE_SECURE = True

CSRF_COOKIE_HTTPONLY = True

ROOT_URLCONF = 'snomedct_terminology_server.config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'snomedct_terminology_server.config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

db_url = os.getenv(
    'DATABASE_URL',
)

DATABASES = {'default': dj_database_url.config(default=db_url)}
DATABASES['default']['CONN_MAX_AGE'] = 60


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
# Custom theme (c.f. MFL API)
STATIC_URL = '/static/'
STATIC_ROOT = os.getenv('STATIC_ROOT', '')


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': True,
            'context_processors': [
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.debug",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.request",
            ]
        }
    },
]

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

# Pagination
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework.filters.DjangoFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination',
    'PAGE_SIZE': 100,
}

# Issue a http redirect if the request url doesn't have a slash appended
APPEND_SLASH = True

USE_ETAGS = True

# Caching
if not DEBUG:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': 'unix:///var/run/redis/redis.sock',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient'
            }
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }


# Cache lives for 1 week
CACHE_LIFETIME = 604800
CACHE_MIDDLEWARE_SECONDS = CACHE_LIFETIME

# Sentry configuration url, or 'dsn'. Read by Sentry to track errors.
RAVEN_CONFIG = {
    'dsn': os.getenv('RAVEN_DSN')
}
