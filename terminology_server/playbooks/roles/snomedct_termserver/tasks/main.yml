---
- name: make cache directory
  file: name={{termserver_cache_dir}} state=directory
  become_user: root
  tags: snomedct_termserver

- name: Ensure the postgresql service is running
  service: name=postgresql state=started enabled=yes
  become_user: root
  tags: ["snomedct_termserver", "postgresql_server"]

- name: Add custom database user for management
  become_user: postgres
  shell: >-
    if psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{pg_login_user}}'" | grep -q 1 ; then
    echo "role '{{pg_login_user}}' exists";
    else createuser --superuser {{pg_login_user}};
    fi
  tags: ["postgresql_user", "postgresql_create_user", "snomedct_termserver"]

- name: alter custom user password
  become_user: postgres
  shell: >
    psql -c "ALTER ROLE postgres WITH PASSWORD '{{pg_login_password}}';"
  tags: ["postgresql_user", "postgresql_change_user_password", "snomedct_termserver"]

- name: Add db for custom user for management
  become_user: postgres
  shell: >
    if psql -lqt | cut -d \| -f 1 | grep -wq {{pg_login_user}}; then
    echo "database {{pg_login_user}} exists";
    else psql -c "CREATE DATABASE {{pg_login_user}};";
    fi
  tags: ["postgresql_user", "postgresql_database", "snomedct_termserver"]

- name: make termserver installation directory
  file: name={{ termserver_install_dir }} owner={{deploy_user}} group={{deploy_group}} state=directory
  become_user: root
  tags: snomedct_termserver

- name: Manually create the termserver virtualenv
  command: virtualenv {{termserver_venv_dir}} -p python3 creates="{{termserver_venv_dir}}"
  tags: snomedct_termserver

- name: Update pip in termserver virtualenv
  pip: >-
    name=pip virtualenv={{termserver_venv_dir}} state=latest
  become_user: root
  tags: snomedct_termserver

- name: Install snomedct-terminology-server
  pip: >-
    name=sil-snomedct-terminology-server version={{termserver_version}} virtualenv={{termserver_venv_dir}}
  become_user: "{{deploy_user}}"
  tags: snomedct_termserver, webserver_settings, static, rebuild, version_update

- name: Install drf_extensions
  pip: >-
    name="git+https://github.com/poppingtonic/drf-extensions.git@fix-django-1.10-compat-url-imports\#egg=drf_extensions"
    virtualenv={{termserver_venv_dir}}
  become_user: "{{deploy_user}}"
  tags: snomedct_termserver, webserver_settings, static, rebuild, version_update

- name: setup termserver database user
  postgresql_user: >
    name={{termserver_db_user}}
    password={{termserver_db_pass}}
    state=present
    role_attr_flags=LOGIN,SUPERUSER,CREATEDB,CREATEROLE,REPLICATION
    login_host={{db_host}}
    login_user=postgres
    login_password={{pg_login_password}}
    port={{db_port}}
  become_user: root
  tags: snomedct_termserver

- name: restart postgresql
  service: name=postgresql state=restarted
  become_user: root
  tags: snomedct_buildserver, rebuild, final_fetch

- name: drop termserver database
  postgresql_db: >
    name={{termserver_db_name}}
    owner={{termserver_db_user}}
    login_host={{db_host}}
    login_user=postgres
    login_password={{pg_login_password}}
    port={{db_port}}
    state=absent
  become_user: root
  tags: snomedct_termserver, final_fetch, rebuild


- name: setup termserver database
  postgresql_db: >
    name={{termserver_db_name}}
    owner={{termserver_db_user}}
    login_host={{db_host}}
    login_user=postgres
    login_password={{pg_login_password}}
    port={{db_port}}
    state=present
  become_user: root
  tags: snomedct_termserver, final_fetch, rebuild

- name: grant privileges to user on termserver database
  postgresql_privs: >
    db={{termserver_db_name}}
    state=present
    type=database
    role={{termserver_db_user}}
    privs=ALL
    login_host={{db_host}}
    login_user=postgres
    login_password={{pg_login_password}}
    port={{db_port}}
  become_user: root
  tags: snomedct_termserver, final_fetch, rebuild

- name: add env file and runfile
  template: src={{ item.src }} dest={{termserver_install_dir}}/{{ item.dest }}
  tags: snomedct_termserver, webserver_settings,static,final_fetch, copy_scripts
  with_items:
      - { src: "snomedct_termserver.env.sh", dest: "termserver_env.sh" }
      - { src: "run_pg_vacuum.sh", dest: "run_pg_vacuum.sh" }
      - { src: "snomedct_termserver.run.sh", dest: "termserver_run.sh" }
      - { src: "snomedct_termserver.server.sh", dest: "server.sh" }
      - { src: "snomedct_termserver.initialize.sh", dest: "initialize.sh" }
      - { src: "snomedct_termserver.static_files.sh", dest: "static_files.sh" }
      - { src: "newrelic.ini.tpl", dest: "newrelic.ini" }
      - { src: "iso_639_2.json", dest: "iso_639_2.json"}
  become_user: root

- name: make termserver_run.sh executable
  file: >-
    path={{termserver_install_dir}}/termserver_run.sh mode="a+rwx"
  tags: snomedct_termserver, copy_scripts
  become_user: root

- name: make initialize.sh executable
  file: >-
    path={{termserver_install_dir}}/initialize.sh mode="a+rwx"
  tags: snomedct_termserver, copy_scripts
  become_user: root

- name: make run_pg_vacuum.sh executable
  file: >-
    path={{termserver_install_dir}}/run_pg_vacuum.sh mode="a+rwx"
  tags: snomedct_termserver, copy_scripts
  become_user: root

- name: make ancestry graph directory
  file: name={{ ancestry_graph_dir }} owner={{deploy_user}} group={{deploy_group}} state=directory
  tags: snomedct_termserver, webserver_settings

- name: make final_build_data directory
  file: >-
    path={{termserver_install_dir}}/final_build_data state=directory owner={{deploy_user}}
  tags: snomedct_termserver
  become_user: root

- name: execute run.sh to fetch and decompress final build data
  command: >-
    bash {{termserver_install_dir}}/termserver_run.sh
  tags: snomedct_termserver, final_fetch
  become_user: root

- name: Copy word-equivalents file
  template: >-
    src="zres_WordEquivalents_en-US_INT_20150515.txt" dest=/opt/snomedct_terminology_server/final_build_data/ owner={{deploy_user}} group={{deploy_user}}
  become_user: root
  tags: snomedct_termserver, final_fetch, rebuild

- name: migrate database
  command: >-
    bash {{termserver_install_dir}}/initialize.sh
  tags: snomedct_termserver, final_fetch, rebuild, load
  become_user: "{{deploy_user}}"

- name: run VACUUM ANALYZE on database, improving query planner estimates
  command: >-
    bash {{termserver_install_dir}}/run_pg_vacuum.sh
  tags: snomedct_termserver, final_fetch, rebuild, vacuum_database, load
  become_user: "{{deploy_user}}"

- name: make static directory
  file: name={{ static_dir }} owner={{deploy_user}} group={{deploy_group}} state=directory
  tags: snomedct_termserver

- name: collect static files
  command: >-
    bash {{termserver_install_dir}}/static_files.sh
  tags: snomedct_termserver, static
  become_user: root

- name: copy snomedct_termserver.nginx.conf to nginx sites-available
  template: >
    src=snomedct_termserver.nginx.conf
    dest="/etc/nginx/sites-available/snomedct_termserver"
    owner="www-data"
  tags: snomedct_termserver, webserver_settings
  become_user: root

- name: set nginx sites-available to sites-enabled
  file: >
    src="/etc/nginx/sites-available/snomedct_termserver"
    dest="/etc/nginx/sites-enabled/snomedct_termserver"
    state=link
  tags: snomedct_termserver, webserver_settings
  become_user: root

- name: stop nginx
  service: >-
    name=nginx state=stopped
  become_user: root
  tags: snomedct_termserver, webserver_settings, rebuild

- name: start nginx
  service: >-
    name=nginx state=started
  become_user: root
  tags: snomedct_termserver, webserver_settings, rebuild

- name: add supervisor config to supervisord conf.d
  template: >-
    src=snomedct_termserver.supervisor.conf dest={{supervisor_conf_dir}}/snomedct_termserver.conf
  tags: snomedct_termserver, webserver_settings, supervisor_conf
  become_user: root

- name: stop supervisor
  service: >-
    name=supervisor state=stopped
  become_user: root
  tags: snomedct_termserver, webserver_settings, rebuild, version_update, supervisor_conf, final_fetch

- name: make log directory
  file: name={{ log_dir }} group={{deploy_group}} owner={{deploy_user}} state=directory mode=u=rwx,g=rwx,o=r
  become_user: root
  tags: snomedct_termserver, webserver_settings, version_update, supervisor_conf

- name: start supervisor
  service: >-
    name=supervisor state=started
  become_user: root
  tags: snomedct_termserver, webserver_settings, rebuild, version_update, supervisor_conf, final_fetch

- name: allow port 80
  ufw: port=80 proto=tcp rule=allow
  tags: snomedct_termserver, webserver_settings, supervisor_conf
  become_user: root
